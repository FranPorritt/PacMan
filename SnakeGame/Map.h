#pragma once
#include <SFML/Graphics.hpp>
#include <vector>
#include <list>
#include "Walls.h"
#include "Pellets.h"
#include "PowerUp.h"
#include "Player.h"
#include "Points.h"
#include "Ghosts.h"

using namespace std;

class Map
{
protected:
	float x = 0.0f;
	float y = 40.0f;
	float gridSize = 25.0f; // Size of each grid space

	static const int rows = 37;
	static const int cols = 33;

	int grid[rows][cols] = {
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},		//KEY:
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},		// 0 -- Pellet Space
		{1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,2,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1},		// 1 -- Wall
		{1,4,1,2,2,2,1,0,1,2,2,2,2,1,0,1,2,1,0,1,2,2,2,2,1,0,1,2,2,2,1,4,1},		// 2 -- Empty Space
		{1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1},		// 3 -- Player Spawn
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},		// 4 -- Power Up
		{1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1},
		{1,0,1,2,2,2,1,0,1,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,1,0,1,2,2,2,1,0,1},
		{1,0,1,1,1,1,1,0,1,2,1,0,1,1,1,1,2,1,1,1,1,0,1,2,1,0,1,1,1,1,1,0,1},
		{1,0,0,0,0,0,0,0,1,2,1,0,0,0,0,1,2,1,0,0,0,0,1,2,1,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,0,1,2,1,1,1,1,0,1,2,1,0,1,1,1,1,2,1,0,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,1,0,1,2,2,2,2,1,0,1,2,1,0,1,2,2,2,2,1,0,1,2,2,2,2,2,2},
		{2,2,2,2,2,2,1,0,1,2,1,1,1,1,0,1,1,1,0,1,1,1,1,2,1,0,1,2,2,2,2,2,2},
		{2,2,2,2,2,2,1,0,1,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,1,0,1,2,2,2,2,2,2},
		{2,2,2,2,2,2,1,0,1,2,1,2,1,1,1,1,2,1,1,1,1,2,1,2,1,0,1,2,2,2,2,2,2},
		{1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1,0,1,1,1,1,1,1,1},
		{1,2,2,2,2,2,2,0,0,0,0,2,1,1,1,2,2,2,1,1,1,2,0,0,0,0,2,2,2,2,2,2,1},
		{1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,0,1,1,1,1,1,1,1},
		{2,2,2,2,2,2,1,0,1,2,1,2,1,1,1,1,1,1,1,1,1,2,1,2,1,0,1,2,2,2,2,2,2},
		{2,2,2,2,2,2,1,0,1,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,1,0,1,2,2,2,2,2,2},
		{2,2,2,2,2,2,1,0,1,2,1,0,1,1,1,1,1,1,1,1,1,0,1,2,1,0,1,2,2,2,2,2,2},
		{2,2,2,2,2,2,1,0,1,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,1,0,1,2,2,2,2,2,2},
		{1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,2,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,1,2,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1},
		{1,0,1,2,2,2,1,0,1,2,2,2,2,1,0,1,2,1,0,1,2,2,2,2,1,0,1,2,2,2,1,0,1},
		{1,0,1,1,1,2,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,2,1,1,1,0,1},
		{1,4,0,0,1,2,1,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,1,2,1,0,0,4,1},
		{1,1,1,0,1,2,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,2,1,0,1,1,1},
		{2,2,1,0,1,2,1,0,1,2,1,0,1,2,2,2,2,2,2,2,1,0,1,2,1,0,1,2,1,0,1,2,2},
		{1,1,1,0,1,1,1,0,1,2,1,0,1,1,1,1,2,1,1,1,1,0,1,2,1,0,1,1,1,0,1,1,1},
		{1,0,0,0,0,0,0,0,1,2,1,0,0,0,0,1,2,1,0,0,0,0,1,2,1,0,0,0,0,0,0,0,1},
		{1,0,1,1,1,1,1,1,1,2,1,1,1,1,0,1,2,1,0,1,1,1,1,2,1,1,1,1,1,1,1,0,1},
		{1,0,1,2,2,2,2,2,2,2,2,2,2,1,0,1,2,1,0,1,2,2,2,2,2,2,2,2,2,2,1,0,1},
		{1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
	};

	sf::Vector2f mapPos[rows][cols];
	sf::Vector2f newWallPos;
	sf::Vector2f newPelletPos;
	sf::Vector2f newPowerPos;
	sf::Vector2f playerSpawn;

	list<Walls*> walls;
	list<Pellets*> pellets;
	list<PowerUp*> powerUps;

	Player* player;
	Points* points = Points::getInstance();

	bool wallAbove = true;
	bool wallBelow = true;
	bool wallLeft = true;
	bool wallRight = true;

	bool areGhostsFrightened = false;
	int frightTimer = 0;
	int frightTime = 50;

	bool isGameWon = false;
	int pelletsRemaining = 0;

public:
	Map();
	~Map();

	// Sets up map on start up
	void FillMapPos();
	void CreateMap(sf::RenderWindow& window);
	sf::Vector2f GetPlayerSpawn();
	void Render(sf::RenderWindow& window);
	void Update();

	// Checks around the player for walls and allows movement based on these checks
	void CollisionChecks(sf::Vector2f& checkPos); 
	void PelletCollisions(sf::Vector2f& checkPos);
	void GhostsFrightened();
	bool GetWallAbove();
	bool GetWallBelow();
	bool GetWallLeft();
	bool GetWallRight();
	bool GetGhostsFright();
	bool GetGameWon();
	int GetPelletsRemaining();
};

